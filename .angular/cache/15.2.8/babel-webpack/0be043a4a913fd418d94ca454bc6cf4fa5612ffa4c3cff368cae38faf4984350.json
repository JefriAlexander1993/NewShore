{"ast":null,"code":"import { HttpHeaders } from '@angular/common/http';\nimport { throwError } from 'rxjs';\nimport { retry, catchError } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class RestApiService {\n  constructor(http) {\n    this.http = http;\n    // Define API\n    this.apiURL = \"https://recruiting-api.newshore.es/api/flights/\";\n    this.httpOptions = {\n      headers: new HttpHeaders({\n        'Content-Type': 'application/json'\n      })\n    };\n  }\n  searchJourney(origin, destination) {\n    return this.http.get(this.apiURL + '/Journey?origin=' + origin + '&destination=' + destination).pipe(retry(1), catchError(this.handleError));\n  }\n  // Error handling\n  handleError(error) {\n    let errorMessage = '';\n    if (error.error instanceof ErrorEvent) {\n      // Get client-side error\n      errorMessage = error.error.message;\n    } else {\n      // Get server-side error\n      errorMessage = `Error Code: ${error.status}\\nMessage: ${error.message}`;\n    }\n    toast.error(errorMessage);\n    return throwError(() => {\n      return errorMessage;\n    });\n  }\n}\nRestApiService.ɵfac = function RestApiService_Factory(t) {\n  return new (t || RestApiService)(i0.ɵɵinject(i1.HttpClient));\n};\nRestApiService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: RestApiService,\n  factory: RestApiService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"AACA,SAAqBA,WAAW,QAAQ,sBAAsB;AAC9D,SAAqBC,UAAU,QAAQ,MAAM;AAC7C,SAASC,KAAK,EAAEC,UAAU,QAAQ,gBAAgB;;;AAMlD,OAAM,MAAOC,cAAc;EAGzBC,YAAoBC,IAAgB;IAAhB,SAAI,GAAJA,IAAI;IAFxB;IACA,WAAM,GAAG,iDAAiD;IAI1D,gBAAW,GAAG;MACZC,OAAO,EAAE,IAAIP,WAAW,CAAC;QACvB,cAAc,EAAE;OACjB;KACF;EAPsC;EASvCQ,aAAa,CAACC,MAAW,EAAEC,WAAgB;IACzC,OAAO,IAAI,CAACJ,IAAI,CACbK,GAAG,CAAW,IAAI,CAACC,MAAM,GAAG,kBAAkB,GAACH,MAAM,GAAC,eAAe,GAACC,WAAW,CAAC,CAClFG,IAAI,CAACX,KAAK,CAAC,CAAC,CAAC,EAAEC,UAAU,CAAC,IAAI,CAACW,WAAW,CAAC,CAAC;EACjD;EAEA;EACAA,WAAW,CAACC,KAAU;IACpB,IAAIC,YAAY,GAAG,EAAE;IACrB,IAAID,KAAK,CAACA,KAAK,YAAYE,UAAU,EAAE;MACrC;MACAD,YAAY,GAAGD,KAAK,CAACA,KAAK,CAACG,OAAO;KACnC,MAAM;MACL;MACAF,YAAY,GAAG,eAAeD,KAAK,CAACI,MAAM,cAAcJ,KAAK,CAACG,OAAO,EAAE;;IAEzEE,KAAK,CAACL,KAAK,CAACC,YAAY,CAAC;IACzB,OAAOf,UAAU,CAAC,MAAK;MACrB,OAAOe,YAAY;IACrB,CAAC,CAAC;EACJ;;AAhCWZ,cAAc;mBAAdA,cAAc;AAAA;AAAdA,cAAc;SAAdA,cAAc;EAAAiB,SAAdjB,cAAc;EAAAkB,YAFb;AAAM","names":["HttpHeaders","throwError","retry","catchError","RestApiService","constructor","http","headers","searchJourney","origin","destination","get","apiURL","pipe","handleError","error","errorMessage","ErrorEvent","message","status","toast","factory","providedIn"],"sourceRoot":"","sources":["/media/jefrialexander/DATOS10/PRUEBAS/PruebaNewShore-main/JourneyForm/src/app/services/rest-api.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { Observable, throwError } from 'rxjs';\nimport { retry, catchError } from 'rxjs/operators';\nimport { IJourney } from '../interfaces/Journey';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class RestApiService {\n  // Define API\n  apiURL = \"https://recruiting-api.newshore.es/api/flights/\";\n  constructor(private http: HttpClient) {}\n\n\n  httpOptions = {\n    headers: new HttpHeaders({\n      'Content-Type': 'application/json',\n    }),\n  };\n\n  searchJourney(origin: any, destination: any): Observable<IJourney> {\n    return this.http\n      .get<IJourney>(this.apiURL + '/Journey?origin='+origin+'&destination='+destination)\n      .pipe(retry(1), catchError(this.handleError));\n  }\n\n  // Error handling\n  handleError(error: any) {\n    let errorMessage = '';\n    if (error.error instanceof ErrorEvent) {\n      // Get client-side error\n      errorMessage = error.error.message;\n    } else {\n      // Get server-side error\n      errorMessage = `Error Code: ${error.status}\\nMessage: ${error.message}`;\n    }\n    toast.error(errorMessage);\n    return throwError(() => {\n      return errorMessage;\n    });\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}