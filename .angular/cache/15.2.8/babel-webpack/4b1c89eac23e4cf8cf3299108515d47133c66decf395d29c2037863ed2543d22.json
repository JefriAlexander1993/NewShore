{"ast":null,"code":"import { HttpHeaders } from '@angular/common/http';\nimport { throwError } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class RestApiService {\n  constructor(http) {\n    this.http = http;\n    // Define API\n    this.apiURL = \"https://recruiting-api.newshore.es/api/flights/2\";\n    this.httpOptions = {\n      headers: new HttpHeaders({\n        'Content-Type': 'application/json'\n      })\n    };\n  }\n  searchJourney() {\n    return this.http.get(this.apiURL).pipe(map(response => {\n      return response.map(item => {\n        const Journey = new Journey();\n        user.name = item.name;\n        user.email = item.email;\n        user.phone = item.phone;\n        return user;\n      });\n    }));\n  }\n  // Error handling\n  handleError(error) {\n    let errorMessage = '';\n    if (error.error instanceof ErrorEvent) {\n      // Get client-side error\n      errorMessage = error.error.message;\n    } else {\n      // Get server-side error\n      errorMessage = `Error Code: ${error.status}\\nMessage: ${error.message}`;\n    }\n    alert(errorMessage);\n    return throwError(() => {\n      return errorMessage;\n    });\n  }\n}\nRestApiService.ɵfac = function RestApiService_Factory(t) {\n  return new (t || RestApiService)(i0.ɵɵinject(i1.HttpClient));\n};\nRestApiService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: RestApiService,\n  factory: RestApiService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"AACA,SAAqBA,WAAW,QAAQ,sBAAsB;AAC9D,SAAqBC,UAAU,QAAQ,MAAM;;;AAO7C,OAAM,MAAOC,cAAc;EAGzBC,YAAoBC,IAAgB;IAAhB,SAAI,GAAJA,IAAI;IAFxB;IACA,WAAM,GAAG,kDAAkD;IAI3D,gBAAW,GAAG;MACZC,OAAO,EAAE,IAAIL,WAAW,CAAC;QACvB,cAAc,EAAE;OACjB;KACF;EAPsC;EASvCM,aAAa;IAEX,OAAO,IAAI,CAACF,IAAI,CAACG,GAAG,CAAY,IAAI,CAACC,MAAM,CAAC,CAACC,IAAI,CAC/CC,GAAG,CAAEC,QAAa,IAAI;MACpB,OAAOA,QAAQ,CAACD,GAAG,CAAEE,IAAS,IAAI;QAChC,MAAMC,OAAO,GAAG,IAAIA,OAAO,EAAE;QAE7BC,IAAI,CAACC,IAAI,GAAGH,IAAI,CAACG,IAAI;QACrBD,IAAI,CAACE,KAAK,GAAGJ,IAAI,CAACI,KAAK;QACvBF,IAAI,CAACG,KAAK,GAAGL,IAAI,CAACK,KAAK;QACvB,OAAOH,IAAI;MACb,CAAC,CAAC;IACJ,CAAC,CAAC,CACH;EAEH;EAEA;EACAI,WAAW,CAACC,KAAU;IACpB,IAAIC,YAAY,GAAG,EAAE;IACrB,IAAID,KAAK,CAACA,KAAK,YAAYE,UAAU,EAAE;MACrC;MACAD,YAAY,GAAGD,KAAK,CAACA,KAAK,CAACG,OAAO;KACnC,MAAM;MACL;MACAF,YAAY,GAAG,eAAeD,KAAK,CAACI,MAAM,cAAcJ,KAAK,CAACG,OAAO,EAAE;;IAEzEE,KAAK,CAACJ,YAAY,CAAC;IACnB,OAAOnB,UAAU,CAAC,MAAK;MACrB,OAAOmB,YAAY;IACrB,CAAC,CAAC;EACJ;;AA3CWlB,cAAc;mBAAdA,cAAc;AAAA;AAAdA,cAAc;SAAdA,cAAc;EAAAuB,SAAdvB,cAAc;EAAAwB,YAFb;AAAM","names":["HttpHeaders","throwError","RestApiService","constructor","http","headers","searchJourney","get","apiURL","pipe","map","response","item","Journey","user","name","email","phone","handleError","error","errorMessage","ErrorEvent","message","status","alert","factory","providedIn"],"sourceRoot":"","sources":["/media/jefrialexander/DATOS10/PRUEBAS/NewShore/JourneyForm/src/app/services/rest-api.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { Observable, throwError } from 'rxjs';\nimport { retry, catchError } from 'rxjs/operators';\nimport { Journey } from '../models/Journey';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class RestApiService {\n  // Define API\n  apiURL = \"https://recruiting-api.newshore.es/api/flights/2\";\n  constructor(private http: HttpClient) {}\n\n\n  httpOptions = {\n    headers: new HttpHeaders({\n      'Content-Type': 'application/json',\n    }),\n  };\n\n  searchJourney(): Observable<Journey[]> {\n\n    return this.http.get<Journey[]>(this.apiURL).pipe(\n      map((response: any) => {\n        return response.map((item: any) => {\n          const Journey = new Journey();\n     \n          user.name = item.name;\n          user.email = item.email;\n          user.phone = item.phone;\n          return user;\n        });\n      })\n    );\n\n  }\n\n  // Error handling\n  handleError(error: any) {\n    let errorMessage = '';\n    if (error.error instanceof ErrorEvent) {\n      // Get client-side error\n      errorMessage = error.error.message;\n    } else {\n      // Get server-side error\n      errorMessage = `Error Code: ${error.status}\\nMessage: ${error.message}`;\n    }\n    alert(errorMessage);\n    return throwError(() => {\n      return errorMessage;\n    });\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}