{"ast":null,"code":"import { HttpHeaders } from '@angular/common/http';\nimport { throwError } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { Journey } from '../models/Journey';\nimport { Flight } from '../models/Flight';\nimport { Transport } from '../models/Transport';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class RestApiService {\n  constructor(http) {\n    this.http = http;\n    // Define API\n    this.apiURL = \"https://recruiting-api.newshore.es/api/flights/2\";\n    this.flights = [];\n    this.httpOptions = {\n      headers: new HttpHeaders({\n        'Content-Type': 'application/json'\n      })\n    };\n  }\n  searchJourney(origin, destination) {\n    return this.http.get(this.apiURL).pipe(map(response => {\n      this.Journey = response.filter(journey => {\n        return journey.departureStation === origin && journey.arrivalStation === destination;\n      });\n      return response.map(item => {\n        if (item.departureStation !== origin && item.arrivalStation !== destination) {\n          const transport = new Transport(item.flightCarrier, item.flightNumber);\n          const flight = new Flight(item.departureStation, item.arrivalStation, item.price, transport);\n          this.flights.push(flight);\n        }\n        const journey = new Journey(item.departureStation, item.arrivalStation, item.price, this.flights);\n        return journey;\n      });\n    }));\n  }\n  // Error handling\n  handleError(error) {\n    let errorMessage = '';\n    if (error.error instanceof ErrorEvent) {\n      // Get client-side error\n      errorMessage = error.error.message;\n    } else {\n      // Get server-side error\n      errorMessage = `Error Code: ${error.status}\\nMessage: ${error.message}`;\n    }\n    alert(errorMessage);\n    return throwError(() => {\n      return errorMessage;\n    });\n  }\n}\nRestApiService.ɵfac = function RestApiService_Factory(t) {\n  return new (t || RestApiService)(i0.ɵɵinject(i1.HttpClient));\n};\nRestApiService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: RestApiService,\n  factory: RestApiService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"AACA,SAAqBA,WAAW,QAAQ,sBAAsB;AAC9D,SAAqBC,UAAU,QAAQ,MAAM;AAC7C,SAA4BC,GAAG,QAAQ,gBAAgB;AACvD,SAASC,OAAO,QAAQ,mBAAmB;AAC3C,SAASC,MAAM,QAAQ,kBAAkB;AACzC,SAASC,SAAS,QAAQ,qBAAqB;;;AAK/C,OAAM,MAAOC,cAAc;EAGzBC,YAAoBC,IAAgB;IAAhB,SAAI,GAAJA,IAAI;IAFxB;IACA,WAAM,GAAG,kDAAkD;IAG3D,YAAO,GAAa,EAAE;IAEtB,gBAAW,GAAG;MACZC,OAAO,EAAE,IAAIT,WAAW,CAAC;QACvB,cAAc,EAAE;OACjB;KACF;EARuC;EAWxCU,aAAa,CAACC,MAAW,EAAEC,WAAgB;IAEzC,OAAO,IAAI,CAACJ,IAAI,CAACK,GAAG,CAAY,IAAI,CAACC,MAAM,CAAC,CAACC,IAAI,CAACb,GAAG,CAAEc,QAAa,IAAI;MAGtE,IAAI,CAACb,OAAO,GAAGa,QAAQ,CAACC,MAAM,CAAEC,OAAY,IAAI;QAC9C,OAAOA,OAAO,CAACC,gBAAgB,KAAIR,MAAM,IAAIO,OAAO,CAACE,cAAc,KAAKR,WAAW;MACrF,CAAC,CAAC;MAEF,OAAOI,QAAQ,CAACd,GAAG,CAAEmB,IAAS,IAAI;QAEhC,IAAIA,IAAI,CAACF,gBAAgB,KAAKR,MAAM,IAAIU,IAAI,CAACD,cAAc,KAAKR,WAAW,EAAE;UAE3E,MAAMU,SAAS,GAAG,IAAIjB,SAAS,CAACgB,IAAI,CAACE,aAAa,EAAEF,IAAI,CAACG,YAAY,CAAC;UAEtE,MAAMC,MAAM,GAAG,IAAIrB,MAAM,CAACiB,IAAI,CAACF,gBAAgB,EAAEE,IAAI,CAACD,cAAc,EAAEC,IAAI,CAACK,KAAK,EAAEJ,SAAS,CAAC;UAC5F,IAAI,CAACK,OAAO,CAACC,IAAI,CAACH,MAAM,CAAC;;QAG3B,MAAMP,OAAO,GAAG,IAAIf,OAAO,CAACkB,IAAI,CAACF,gBAAgB,EAAEE,IAAI,CAACD,cAAc,EAAEC,IAAI,CAACK,KAAK,EAAE,IAAI,CAACC,OAAO,CAAC;QACjG,OAAOT,OAAO;MAChB,CAAC,CAAC;IACJ,CAAC,CAAC,CACD;EAEH;EAEA;EACAW,WAAW,CAACC,KAAU;IACpB,IAAIC,YAAY,GAAG,EAAE;IACrB,IAAID,KAAK,CAACA,KAAK,YAAYE,UAAU,EAAE;MACrC;MACAD,YAAY,GAAGD,KAAK,CAACA,KAAK,CAACG,OAAO;KACnC,MAAM;MACL;MACAF,YAAY,GAAG,eAAeD,KAAK,CAACI,MAAM,cAAcJ,KAAK,CAACG,OAAO,EAAE;;IAEzEE,KAAK,CAACJ,YAAY,CAAC;IACnB,OAAO9B,UAAU,CAAC,MAAK;MACrB,OAAO8B,YAAY;IACrB,CAAC,CAAC;EACJ;;AAvDWzB,cAAc;mBAAdA,cAAc;AAAA;AAAdA,cAAc;SAAdA,cAAc;EAAA8B,SAAd9B,cAAc;EAAA+B,YAFb;AAAM","names":["HttpHeaders","throwError","map","Journey","Flight","Transport","RestApiService","constructor","http","headers","searchJourney","origin","destination","get","apiURL","pipe","response","filter","journey","departureStation","arrivalStation","item","transport","flightCarrier","flightNumber","flight","price","flights","push","handleError","error","errorMessage","ErrorEvent","message","status","alert","factory","providedIn"],"sourceRoot":"","sources":["/media/jefrialexander/DATOS10/PRUEBAS/NewShore/JourneyForm/src/app/services/rest-api.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { Observable, throwError } from 'rxjs';\nimport { retry, catchError, map } from 'rxjs/operators';\nimport { Journey } from '../models/Journey';\nimport { Flight } from '../models/Flight';\nimport { Transport } from '../models/Transport';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class RestApiService {\n  // Define API\n  apiURL = \"https://recruiting-api.newshore.es/api/flights/2\";\n  constructor(private http: HttpClient) { }\n\n  flights: Flight[] = [];\n  journeys:[]\n  httpOptions = {\n    headers: new HttpHeaders({\n      'Content-Type': 'application/json',\n    }),\n  };\n\n\n  searchJourney(origin: any, destination: any): Observable<Journey[]> {\n\n    return this.http.get<Journey[]>(this.apiURL).pipe(map((response: any) => {\n\n\n      this.Journey = response.filter((journey: any) => {\n        return journey.departureStation ===origin && journey.arrivalStation === destination;\n      });\n\n      return response.map((item: any) => {\n\n        if (item.departureStation !== origin && item.arrivalStation !== destination) {\n\n          const transport = new Transport(item.flightCarrier, item.flightNumber);\n\n          const flight = new Flight(item.departureStation, item.arrivalStation, item.price, transport);\n          this.flights.push(flight);\n\n        }\n        const journey = new Journey(item.departureStation, item.arrivalStation, item.price, this.flights);\n        return journey;\n      });\n    })\n    );\n\n  }\n\n  // Error handling\n  handleError(error: any) {\n    let errorMessage = '';\n    if (error.error instanceof ErrorEvent) {\n      // Get client-side error\n      errorMessage = error.error.message;\n    } else {\n      // Get server-side error\n      errorMessage = `Error Code: ${error.status}\\nMessage: ${error.message}`;\n    }\n    alert(errorMessage);\n    return throwError(() => {\n      return errorMessage;\n    });\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}