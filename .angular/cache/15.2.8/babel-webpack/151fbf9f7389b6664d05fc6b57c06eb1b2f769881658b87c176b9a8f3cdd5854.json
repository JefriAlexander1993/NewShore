{"ast":null,"code":"import { HttpHeaders } from '@angular/common/http';\nimport { throwError } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { Journey } from '../models/Journey';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class RestApiService {\n  constructor(http) {\n    this.http = http;\n    // Define API\n    this.apiURL = \"https://recruiting-api.newshore.es/api/flights/2\";\n    this.flights = [];\n    this.httpOptions = {\n      headers: new HttpHeaders({\n        'Content-Type': 'application/json'\n      })\n    };\n  }\n  searchJourney(origin, destination) {\n    return this.http.get(this.apiURL).pipe(map(response => {\n      return response.map(item => {\n        if (item.departureStation !== origin && item.arrivalStation !== destination) {\n          this.flights.push({\n            origin: string,\n            destination: string,\n            price: number,\n            transport: []\n          });\n        }\n        const journey = new Journey(item.departureStation, item.arrivalStation, item.price, []);\n        return journey;\n      });\n    }));\n  }\n  // Error handling\n  handleError(error) {\n    let errorMessage = '';\n    if (error.error instanceof ErrorEvent) {\n      // Get client-side error\n      errorMessage = error.error.message;\n    } else {\n      // Get server-side error\n      errorMessage = `Error Code: ${error.status}\\nMessage: ${error.message}`;\n    }\n    alert(errorMessage);\n    return throwError(() => {\n      return errorMessage;\n    });\n  }\n}\nRestApiService.ɵfac = function RestApiService_Factory(t) {\n  return new (t || RestApiService)(i0.ɵɵinject(i1.HttpClient));\n};\nRestApiService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: RestApiService,\n  factory: RestApiService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"AACA,SAAqBA,WAAW,QAAQ,sBAAsB;AAC9D,SAAqBC,UAAU,QAAQ,MAAM;AAC7C,SAA4BC,GAAG,QAAQ,gBAAgB;AACvD,SAASC,OAAO,QAAQ,mBAAmB;;;AAM3C,OAAM,MAAOC,cAAc;EAGzBC,YAAoBC,IAAgB;IAAhB,SAAI,GAAJA,IAAI;IAFxB;IACA,WAAM,GAAG,kDAAkD;IAG3D,YAAO,GAAQ,EAAE;IACjB,gBAAW,GAAG;MACZC,OAAO,EAAE,IAAIP,WAAW,CAAC;QACvB,cAAc,EAAE;OACjB;KACF;EAPsC;EAUvCQ,aAAa,CAACC,MAAU,EAAEC,WAAe;IAEvC,OAAO,IAAI,CAACJ,IAAI,CAACK,GAAG,CAAY,IAAI,CAACC,MAAM,CAAC,CAACC,IAAI,CAACX,GAAG,CAAEY,QAAa,IAAI;MACpE,OAAOA,QAAQ,CAACZ,GAAG,CAAEa,IAAS,IAAI;QAEhC,IAAGA,IAAI,CAACC,gBAAgB,KAAKP,MAAM,IAAIM,IAAI,CAACE,cAAc,KAAKP,WAAW,EAAC;UACvE,IAAI,CAACQ,OAAO,CAACC,IAAI,CAAC;YAChBV,MAAM,EAAEW,MAAM;YACdV,WAAW,EAAEU,MAAM;YACnBC,KAAK,EAAEC,MAAM;YACbC,SAAS,EAAE;WAEZ,CAAC;;QAON,MAAMC,OAAO,GAAG,IAAIrB,OAAO,CAACY,IAAI,CAACC,gBAAgB,EAACD,IAAI,CAACE,cAAc,EAACF,IAAI,CAACM,KAAK,EAAC,EAAE,CAAC;QACpF,OAAOG,OAAO;MAChB,CAAC,CAAC;IACJ,CAAC,CAAC,CACH;EAEH;EAEA;EACAC,WAAW,CAACC,KAAU;IACpB,IAAIC,YAAY,GAAG,EAAE;IACrB,IAAID,KAAK,CAACA,KAAK,YAAYE,UAAU,EAAE;MACrC;MACAD,YAAY,GAAGD,KAAK,CAACA,KAAK,CAACG,OAAO;KACnC,MAAM;MACL;MACAF,YAAY,GAAG,eAAeD,KAAK,CAACI,MAAM,cAAcJ,KAAK,CAACG,OAAO,EAAE;;IAEzEE,KAAK,CAACJ,YAAY,CAAC;IACnB,OAAO1B,UAAU,CAAC,MAAK;MACrB,OAAO0B,YAAY;IACrB,CAAC,CAAC;EACJ;;AAtDWvB,cAAc;mBAAdA,cAAc;AAAA;AAAdA,cAAc;SAAdA,cAAc;EAAA4B,SAAd5B,cAAc;EAAA6B,YAFb;AAAM","names":["HttpHeaders","throwError","map","Journey","RestApiService","constructor","http","headers","searchJourney","origin","destination","get","apiURL","pipe","response","item","departureStation","arrivalStation","flights","push","string","price","number","transport","journey","handleError","error","errorMessage","ErrorEvent","message","status","alert","factory","providedIn"],"sourceRoot":"","sources":["/media/jefrialexander/DATOS10/PRUEBAS/NewShore/JourneyForm/src/app/services/rest-api.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { Observable, throwError } from 'rxjs';\nimport { retry, catchError, map } from 'rxjs/operators';\nimport { Journey } from '../models/Journey';\n\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class RestApiService {\n  // Define API\n  apiURL = \"https://recruiting-api.newshore.es/api/flights/2\";\n  constructor(private http: HttpClient) {}\n\n  flights: any = [];\n  httpOptions = {\n    headers: new HttpHeaders({\n      'Content-Type': 'application/json',\n    }),\n  };\n\n\n  searchJourney(origin:any, destination:any): Observable<Journey[]> {\n\n    return this.http.get<Journey[]>(this.apiURL).pipe(map((response: any) => {\n        return response.map((item: any) => {\n          \n          if(item.departureStation !== origin && item.arrivalStation !== destination){\n              this.flights.push({\n                origin: string;\n                destination: string;\n                price: number;\n                transport: [];\n                \n              });\n\n          }\n         \n          \n          \n          \n          const journey = new Journey(item.departureStation,item.arrivalStation,item.price,[]);\n          return journey;\n        });\n      })\n    );\n\n  }\n\n  // Error handling\n  handleError(error: any) {\n    let errorMessage = '';\n    if (error.error instanceof ErrorEvent) {\n      // Get client-side error\n      errorMessage = error.error.message;\n    } else {\n      // Get server-side error\n      errorMessage = `Error Code: ${error.status}\\nMessage: ${error.message}`;\n    }\n    alert(errorMessage);\n    return throwError(() => {\n      return errorMessage;\n    });\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}